// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  address        String? //not required 
  age            Int? //not required
  dob            DateTime?
  isUser         Boolean         @default(true)
  uid            String          @unique
  username       String?
  bookingResults BookingResult[]
  carts          Cart?
  orders         Order[]         @relation("UserToOrder")
}

model BookingDetail {
  id               Int           @id @default(autoincrement())
  status           String
  bookingId        Int           @unique
  downloadRequired Boolean
  serviceUniqueId  String
  servicetype      String
  prefix           String?
  firstName        String?
  lastName         String?
  email            String?
  mobile           String?
  nationality      String?
  message          String?
  adult            Int?
  child            Int?
  infant           Int?
  tourDate         String?
  timeSlotId       Int?
  startTime        String?
  pickup           String?
  adultRate        Float?
  serviceTotal     Float?
  tourOption       String?
  tourname         String?
  childRate        Float?
  confirmationNo   String?
  bookingResultId  Int
  createdAt        DateTime      @default(now())
  bookingResult    BookingResult @relation(fields: [bookingResultId], references: [id])

  @@index([bookingResultId], map: "BookingDetail_bookingResultId_fkey")
}

model BookingResult {
  id             Int             @id @default(autoincrement())
  referenceNo    String          @unique
  userId         String          @db.VarChar(255)
  roleId         String?         @db.VarChar(255)
  status         String          @default("Approved") @db.VarChar(255)
  bookingDetails BookingDetail[]
  role           Roles?          @relation(fields: [roleId], references: [uid])
  user           User?           @relation(fields: [userId], references: [uid])

  @@index([roleId], map: "BookingResult_roleId_fkey")
}

model Cart {
  id          Int              @id @default(autoincrement())
  totalamount Float?
  uniqueNo    Int?
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [uid])
  TourDetails CartTourDetail[]
}

model CartTourDetail {
  id              Int     @id @default(autoincrement())
  serviceUniqueId Int?
  tourId          Int
  optionId        Int
  adult           Int
  child           Int
  infant          Int
  tourDate        String
  timeSlotId      Int
  startTime       String
  transferId      Int
  pickup          String?
  adultRate       Float
  roleId          String? //added role id to map it with the bookings by vendors 
  serviceTotal    Float
  cartId          Int
  tourOption      String
  tourname        String
  childRate       Float
  cart            Cart    @relation(fields: [cartId], references: [id])

  @@index([cartId], map: "CartTourDetail_cartId_fkey")
}

model Order {
  id       Int      @id @default(autoincrement())
  age      Int
  adults   Int
  children Int
  tourId   Int
  amount   Float
  date     DateTime
  status   String   @default("Approved")
  username String
  user     User     @relation("UserToOrder", fields: [tourId], references: [id])

  @@index([tourId], map: "Order_tourId_fkey")
}

model TimeSlot {
  id           Int        @id @unique @default(autoincrement())
  tourOptionId Int
  timeSlotId   String
  timeSlot     String
  available    Int
  adultPrice   Float
  childPrice   Float
  tourOption   TourOption @relation(fields: [tourOptionId], references: [tourOptionId])

  @@index([tourOptionId], map: "TimeSlot_tourOptionId_fkey")
}

model Continent {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String?
  countries Country[] // One-to-many relation with Country
}

model Country {
  CountryId   Int       @id @default(autoincrement())
  image       String?
  name        String
  continent   Continent @relation(fields: [continentId], references: [id])
  continentId Int
  cities      City[] // One-to-many relation with City
}

model City {
  id        Int              @id @default(autoincrement())
  CityId    Int?             @unique
  CityName  String
  country   Country          @relation(fields: [countryId], references: [CountryId])
  countryId Int
  event     Eventdata[]
  tours     Tourstaticdata[]
}

model Tourtypes {
  id           Int    @id @default(autoincrement())
  cityTourType String @unique
  image        String
}

model Tourstaticdata {
  id                        Int                 @id @default(autoincrement())
  tourId                    Int                 @unique
  continent                 String
  countryId                 Int
  countryName               String
  cityId                    Int
  cityName                  String
  tourName                  String              @unique
  duration                  String? // optional 
  imagePath                 String
  cityTourTypeId            String // it should be list 
  cityTourType              String
  Alwaysavailable           Boolean             @default(true)
  Startingdate              String?
  Endingdate                String?
  recommended               Boolean
  isvisible                 Boolean             @default(true)
  isvisiblePopularTours     Boolean             @default(false)
  isvisibleReccomendedTours Boolean             @default(false)
  isSlot                    Boolean //by default make it false 
  isVendorTour              Boolean             @default(false)
  vendorUid                 String?
  vendor                    Roles?              @relation(fields: [vendorUid], references: [uid])
  tourpricing               TourPricing?
  city                      City                @relation(fields: [cityId], references: [CityId], onDelete: Cascade)
  tourdetails               Tourstaticdatabyid?

  coupons Coupon[] @relation("Coupon")

  @@index([cityId], map: "Tourstaticdata_cityId_fkey")
}

// add start time - closing time optional 
// add defalut markuo 

model Tourstaticdatabyid {
  id                   Int     @id @default(autoincrement())
  countryId            Int
  countryName          String
  continent            String
  cityId               Int
  cityName             String
  tourName             String  @unique
  duration             String
  imagePath            String
  cityTourTypeId       String
  cityTourType         String
  tourDescription      String  @db.LongText
  tourInclusion        String  @db.LongText
  tourShortDescription String  @db.LongText
  importantInformation String  @db.LongText
  itenararyDescription String  @db.LongText
  usefulInformation    String  @db.LongText
  childAge             String? // optional 
  infantAge            String? //optional 
  infantCount          Int // optional 
  isSlot               Boolean
  onlyChild            Boolean //default it false 

  startTime      String // optionl 
  meal           String?
  googleMapUrl   String?
  tourExclusion  String?
  TourId         Int            @unique
  cutOffhrs      Int?           @default(96) //make default (24)
  vendorUid      String? // added this to map it to bookings and vendor 
  isVendorTour   Boolean        @default(false)
  tourOption     TourOption[]
  tourImages     TourImagess[]
  tourstaticdata Tourstaticdata @relation(fields: [TourId], references: [tourId], onDelete: Cascade)
}

model TourImagess {
  id                 Int                @id @default(autoincrement())
  tourId             Int
  imagePath          String
  tourstaticdatabyid Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)

  @@index([tourId], map: "TourImagess_tourId_fkey")
}

model TourPricing {
  id     Int @id @default(autoincrement())
  tourId Int @unique

  amount   Float
  discount Float?
  tour     Tourstaticdata? @relation(fields: [tourId], references: [tourId], onDelete: Cascade)
}

// touroptios to be optional 
// transfers are optional 
// operations days 
model TourOption {
  id                            Int                @id @default(autoincrement())
  tourId                        Int
  optionName                    String
  childAge                      String
  infantAge                     String
  optionDescription             String
  minPax                        Int
  maxPax                        Int
  isWithoutTransfers            Boolean            @default(true)
  isSharingTransfer             Boolean            @default(true)
  isPrivateTransfer             Boolean            @default(true)
  isPrivateBoatWithoutTransfers Boolean            @default(true)
  isPvtYachtWithoutTransfers    Boolean            @default(true)
  tourOptionId                  Int                @unique
  tourStaticDataById            Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)
  operationDays                 OperationDay[]
  timeSlots                     TimeSlot[]
}

model OperationDay {
  id           Int        @id @default(autoincrement())
  tourId       Int
  tourOptionId Int
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  tourOption   TourOption @relation(fields: [tourOptionId], references: [tourOptionId], onDelete: Cascade)

  @@index([tourOptionId], map: "OperationDay_tourOptionId_fkey")
}

model Coupon {
  id       Int             @id @default(autoincrement())
  name     String
  discount Float
  type     String
  eventId  Int?
  event    Eventdata?      @relation("Coupon", fields: [eventId], references: [id], onDelete: Cascade)
  tourId   Int?
  tour     Tourstaticdata? @relation("Coupon", fields: [tourId], references: [id])
}

model Homepage {
  id                    Int     @id @default(autoincrement())
  detail                String  @db.LongText
  gridsectionheading    String
  gridsectionsubheading String
  heading1              String
  heading2              String
  heading3              String
  imagepath             String?
  subtitle              String  @db.LongText
  title                 String
  imagepath2            String?
  imagepath3            String?
}

model BackgroundImage {
  id              Int     @id @default(autoincrement())
  url             String
  isVisibleSlider Boolean @default(false)
}

model Aboutus {
  id          Int    @id @default(autoincrement())
  title       String
  imagepath   String
  imagepath2  String
  imagepath3  String
  heading1    String
  detail1     String
  heading2    String
  subheading2 String
  detail2     String
  subtitle    String
  text        String @db.LongText
}

model Eventdata {
  id            Int           @id @default(autoincrement())
  isVisible     Boolean       @default(true)
  isVisibleHome Boolean       @default(false)
  cityId        Int
  eventName     String
  duration      String
  imagePath     String
  eventType     String
  isSlot        Boolean
  onlyChild     Boolean
  vendorUid     String?
  vendor        Roles?        @relation(fields: [vendorUid], references: [uid])
  recommended   Boolean
  eventdetailid Int?          @unique
  eventdetail   EventDetail[]
  city          City?         @relation(fields: [cityId], references: [CityId], onDelete: Cascade)
  coupons       Coupon[]      @relation("Coupon")

  @@index([cityId], map: "Eventdata_cityId_fkey")
}

model EventDetail {
  id              Int           @id @default(autoincrement())
  eventName       String
  eventdetailid   Int
  description     String        @db.LongText
  date            DateTime
  location        String
  googlemapurl    String
  minage          String
  moreinfo        String        @db.LongText
  ticketinfo      String        @db.LongText
  artistname      String
  artistimage     String
  lastbookingtime DateTime
  eventSelling    Boolean
  ischildallowed  Boolean
  isadultallowed  Boolean
  isinfantallowed Boolean
  duration        String
  vendorUid       String?
  eventoptions    EventOption[]
  images          EventImages[]
  eventdata       Eventdata?    @relation(fields: [eventdetailid], references: [id], onDelete: Cascade)
}

model EventOption {
  id                Int              @id @default(autoincrement())
  eventId           Int
  optionname        String
  adultprice        String
  childprice        String
  infantprice       String
  optiondescription String           @db.LongText
  available         String
  timeslots         EventTimeSlots[]
  eventdetail       EventDetail?     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventTimeSlots {
  id            Int         @id @unique @default(autoincrement())
  eventOptionId Int
  timeSlot      String
  available     String
  adultPrice    String
  childPrice    String
  eventoption   EventOption @relation(fields: [eventOptionId], references: [id], onDelete: Cascade)
}

model EventImages {
  id            Int         @id @default(autoincrement())
  imagePath     String
  eventDetailId Int
  eventdetail   EventDetail @relation(fields: [eventDetailId], references: [id], onDelete: Cascade)
}

model EventTypes {
  id        Int    @id @default(autoincrement())
  eventtype String @unique
}

// lincese number should be Company No.
// continent also 
// document needs to be changed 
model Roles {
  id                    Int              @id @default(autoincrement())
  uid                   String           @unique
  username              String
  isAdmin               Boolean          @default(true)
  isVendor              Boolean          @default(true)
  email                 String           @unique
  address               String
  age                   Int
  name                  String
  CompanyNumber         String
  isApproved            Boolean          @default(false)
  country               String
  city                  String
  services_description  String
  mobile                String
  vatDocument           String?
  bankDocument          String?
  document_tradelicense String
  document_other        String
  created_at            DateTime         @default(now())
  tours                 Tourstaticdata[]
  BookingResult         BookingResult[]
  Eventdata             Eventdata[]
}

model StripeApi {
  id                Int    @id @default(autoincrement())
  secretapikey      String @db.LongText
  publishableapikey String @db.LongText
}

model Emailtemplate {
  id      Int    @id @default(autoincrement())
  subject String @db.LongText
  body    String @db.LongText
}

model ContactUs {
  id           Int    @id @default(autoincrement())
  Heading      String
  Subheading   String
  Subheading2  String
  Address      String
  mobilenumber String
  Email        String
  Heading2     String
  Imagepath    String
}

model Footer {
  id              Int    @id @default(autoincrement())
  logourl         String
  title1          String
  paymentimage    String
  copyright       String
  socialimage1    String
  socialimage2    String
  socialimage3    String
  socialimage4    String
  socialimageurl1 String
  socialimageurl2 String
  socialimageurl3 String
  socialimageurl4 String
}

model Experiences {
  id        Int    @id @default(autoincrement())
  heading   String
  imagepath String
}

model FormSubmission {
  id           Int    @id @default(autoincrement())
  name         String
  email        String
  message      String
  mobilenumber String
}

model TransferTypes {
  id           Int    @unique @default(autoincrement())
  transferName String
  transferId   Int
}
